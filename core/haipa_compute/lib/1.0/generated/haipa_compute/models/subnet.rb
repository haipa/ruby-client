# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Haipa::Client::Compute::V1_0
  module Models
    #
    # Model object.
    #
    #
    class Subnet

      include Haipa::Client

      # @return
      attr_accessor :id

      # @return
      attr_accessor :network_id

      # @return [Boolean]
      attr_accessor :is_public

      # @return [Boolean]
      attr_accessor :dhcp_enabled

      # @return [Integer]
      attr_accessor :ip_version

      # @return [String]
      attr_accessor :gateway_address

      # @return [String]
      attr_accessor :address

      # @return [Array<String>]
      attr_accessor :dns_server_addresses

      # @return [Network]
      attr_accessor :network


      #
      # Mapper for Subnet class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'Subnet',
          type: {
            name: 'Composite',
            class_name: 'Subnet',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              network_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'networkId',
                type: {
                  name: 'String'
                }
              },
              is_public: {
                client_side_validation: true,
                required: false,
                serialized_name: 'isPublic',
                type: {
                  name: 'Boolean'
                }
              },
              dhcp_enabled: {
                client_side_validation: true,
                required: false,
                serialized_name: 'dhcpEnabled',
                type: {
                  name: 'Boolean'
                }
              },
              ip_version: {
                client_side_validation: true,
                required: false,
                serialized_name: 'ipVersion',
                type: {
                  name: 'Number'
                }
              },
              gateway_address: {
                client_side_validation: true,
                required: false,
                serialized_name: 'gatewayAddress',
                type: {
                  name: 'String'
                }
              },
              address: {
                client_side_validation: true,
                required: false,
                serialized_name: 'address',
                type: {
                  name: 'String'
                }
              },
              dns_server_addresses: {
                client_side_validation: true,
                required: false,
                serialized_name: 'dnsServerAddresses',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              },
              network: {
                client_side_validation: true,
                required: false,
                serialized_name: 'network',
                type: {
                  name: 'Composite',
                  class_name: 'Network'
                }
              }
            }
          }
        }
      end
    end
  end
end
